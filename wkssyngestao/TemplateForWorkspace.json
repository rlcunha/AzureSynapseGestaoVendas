{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "wkssyngestao"
		},
		"ls_sagestaoloja_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_sagestaoloja'"
		},
		"ls_sql_noserver_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_noserver'"
		},
		"wkssyngestao-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'wkssyngestao-WorkspaceDefaultSqlServer'"
		},
		"ls_sagestaoloja_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sagestaoloja.dfs.core.windows.net"
		},
		"wkssyngestao-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sagestaoloja.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pp_copy_pdv_to_raw')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "act_copy_excel_to_parquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_excel",
								"type": "DatasetReference",
								"parameters": {
									"p_container": "landing",
									"p_file_name": {
										"value": "@pipeline().parameters.p_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_parquet",
								"type": "DatasetReference",
								"parameters": {
									"p_container_name": "raw",
									"p_directory_name": {
										"value": "pdv/@{split(pipeline().parameters.p_file_name,'.')[0]}/dtingestion=@{pipeline().parameters.p_dt_ingestion}\n",
										"type": "Expression"
									},
									"p_file_name": {
										"value": "split(pipeline().parameters.p_file_name,'.')[0].parquet",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "nb_prepare_trusted_clientes",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "act_copy_excel_to_parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "nb_prepare_trusted_clientes",
								"type": "NotebookReference"
							},
							"parameters": {
								"p_dt_ingestion": {
									"value": {
										"value": "@pipeline().parameters.p_dt_ingestion",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "GestaoPoolSpark",
								"type": "BigDataPoolReference"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_dt_ingestion": {
						"type": "string"
					},
					"p_file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SourceLandingPDV"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-10T19:21:50Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_excel')]",
				"[concat(variables('workspaceId'), '/datasets/ds_parquet')]",
				"[concat(variables('workspaceId'), '/notebooks/nb_prepare_trusted_clientes')]",
				"[concat(variables('workspaceId'), '/bigDataPools/GestaoPoolSpark')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pp_main_PDV')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetAllLandingFile",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_binary_landing",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"itemName",
								"lastModified",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachLandingFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetAllLandingFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetAllLandingFile').output.childItems\n\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "act_copy_excel_to_parquet",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_excel",
											"type": "DatasetReference",
											"parameters": {
												"p_container": "landing",
												"p_file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_parquet",
											"type": "DatasetReference",
											"parameters": {
												"p_container_name": "raw",
												"p_directory_name": {
													"value": "@{split(item().name,'.')[1]}/@{split(item().name,'.')[0]}/dtingestion=@{pipeline().parameters.p_data_ingestion}\n",
													"type": "Expression"
												},
												"p_file_name": {
													"value": "@{split(item().name,'.')[0]}.parquet",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_data_ingestion": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"p_file_ingestion": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SourceLandingPDV"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-11T18:24:25Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_binary_landing')]",
				"[concat(variables('workspaceId'), '/datasets/ds_excel')]",
				"[concat(variables('workspaceId'), '/datasets/ds_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_binary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sagestaoloja",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "landing"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_sagestaoloja')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_binary_landing')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sagestaoloja",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "landing"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_sagestaoloja')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_excel')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sagestaoloja",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_container": {
						"type": "string"
					},
					"p_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_file_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().p_container",
							"type": "Expression"
						}
					},
					"sheetIndex": 0
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_sagestaoloja')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sagestaoloja",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_container_name": {
						"type": "string"
					},
					"p_directory_name": {
						"type": "string"
					},
					"p_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().p_directory_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().p_container_name",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_sagestaoloja')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_sagestaoloja')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sagestaoloja_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_sagestaoloja_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_sql_noserver')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_noserver_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wkssyngestao-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('wkssyngestao-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wkssyngestao-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('wkssyngestao-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/irmysql')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'https://sagestaoloja.dfs.core.windows.net/trusted/contasapagar/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dbTrusted",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'https://sagestaoloja.dfs.core.windows.net/raw/ContasaPagar.xlsx/**',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sc_external_table_clientes')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GestaoVendasTrusted"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'trusted_sagestaoloja_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [trusted_sagestaoloja_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://trusted@sagestaoloja.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE tbClientes (\n\t[CODIGO] int,\n\t[NOME] nvarchar(4000),\n\t[TELEFONE] nvarchar(4000),\n\t[EMAIL] nvarchar(4000),\n\t[NASCIMENTO] nvarchar(4000),\n\t[ANIVERSARIANTE] nvarchar(4000),\n\t[IDADE] int,\n\t[SEXO] nvarchar(4000),\n\t[ORIGEM] nvarchar(4000),\n\t[CADASTRO] nvarchar(4000),\n\t[UNIDADE] nvarchar(4000),\n\t[DATAINGESTAO] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'clientes/**',\n\tDATA_SOURCE = [trusted_sagestaoloja_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.tbClientes\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dbTrusted",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GestaoVendas/raw"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "GestaoPoolSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b8b32dc5-669b-47e6-b945-7984d260c10e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e63e4e78-7bcc-4a13-b746-41dc90a24486/resourceGroups/rg-mibitech/providers/Microsoft.Synapse/workspaces/wkssyngestao/bigDataPools/GestaoPoolSpark",
						"name": "GestaoPoolSpark",
						"type": "Spark",
						"endpoint": "https://wkssyngestao.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/GestaoPoolSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# DBTITLE 1,Complex Types\r\n",
							"import pyspark.sql.functions as F\r\n",
							"from pyspark.sql.types import ArrayType, DoubleType, IntegerType, LongType, StringType, StructType, StructField, BooleanType, MapType\r\n",
							"from pyspark.sql import Row\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# DBTITLE 1,Criação do DataFrame para o exemplo\r\n",
							"data = [Row(\"Kenny\",\"\",10,[50,90,80],{\"status\":\"Active\"}), \r\n",
							"        Row(\"Elis\",\"Robert\",20,[10,56,43,20],{\"status\":\"Inactive\"}), \r\n",
							"        Row(\"Myck\",\"Mendes\",30,[18,50,32],{\"status\":\"Active\"}), \r\n",
							"        Row(\"Edson\",\"Eliot\",40,[60,87,3],{\"status\":\"Active\"}) \r\n",
							"      ]\r\n",
							"\r\n",
							"rdd = spark.sparkContext.parallelize(data)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"# DBTITLE 1,Criação do Esquema\r\n",
							"scheme = StructType([\r\n",
							"         StructField('firstname', StringType(), True),\r\n",
							"         StructField('middlename', StringType(), True),\r\n",
							"         StructField('age', IntegerType(), True),\r\n",
							"         StructField(\"points\", ArrayType(StringType()), True),\r\n",
							"         StructField(\"user_state\", MapType(StringType(),StringType()), True)        \r\n",
							"         ])"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print select(\"firstname\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# DBTITLE 1,Conversão de RDD para DataFrame\r\n",
							"df = rdd.toDF(schema=scheme)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# COMMAND ----------\r\n",
							"\r\n",
							"df.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# DBTITLE 1,Display do DataFrame\r\n",
							"display(df)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.show(truncate=False)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"# DBTITLE 1,Criação de uma nova coluna e explode em uma coluna com o valor array\r\n",
							"df02 = (df.withColumn(\"point\", F.explode(\"points\"))\r\n",
							"  .select(\"firstname\",\"point\",\"user_state.status\")  \r\n",
							"\r\n",
							"display(df02)\r\n",
							"  "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# DBTITLE 1,Filtro por valores de uma coluna array e criação de uma coluna com o segundo valor do array\r\n",
							"df03 = (df.filter(F.array_contains(F.col(\"points\"), \"50\")).withColumn(\"get_point\", F.element_at(F.col(\"points\"), 2)))      \r\n",
							"display(df03)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# DBTITLE 1,Criação de uma coluna com o primeiro valor do array\r\n",
							"df04 = df.withColumn(\"get_point\", F.element_at(F.col(\"points\"), 1))\r\n",
							"display(df04)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# DBTITLE 1,Agrupamento por status e agregação por pontos\r\n",
							"df05 = (df04.groupBy(\"user_state.status\")\r\n",
							"  .agg(F.collect_set(\"get_point\").alias(\"Points\"))\r\n",
							")\r\n",
							"display(df05)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# DBTITLE 1,Renomear coluna\r\n",
							"df05 = df05.withColumnRenamed(\"Points\",\"New_Points\")\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"df05.show(truncate=False)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GestaoVendas/raw"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "GestaoPoolSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6a9e1254-0c37-4ae6-91b2-2f35becd70d1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e63e4e78-7bcc-4a13-b746-41dc90a24486/resourceGroups/rg-mibitech/providers/Microsoft.Synapse/workspaces/wkssyngestao/bigDataPools/GestaoPoolSpark",
						"name": "GestaoPoolSpark",
						"type": "Spark",
						"endpoint": "https://wkssyngestao.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/GestaoPoolSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import pyspark.sql.functions as F\r\n",
							"from pyspark.sql.window import Window\r\n",
							"\r\n",
							"data = [(\"Anderson\",\"Sales\",\"NY\",90000),\r\n",
							"    (\"Kenedy\",\"Sales\",\"CA\",86000),\r\n",
							"    (\"Kenny\",\"Sales\",\"CA\",86000),\r\n",
							"    (\"Billy\",\"Sales\",\"NY\",81000),\r\n",
							"    (\"Andy\",\"Finance\",\"CA\",90000),\r\n",
							"    (\"Mary\",\"Finance\",\"NY\",99000),\r\n",
							"    (\"Eduardo\",\"Finance\",\"NY\",83000),\r\n",
							"    (\"Mendes\",\"Finance\",\"CA\",79000),\r\n",
							"    (\"Keyth\",\"Marketing\",\"CA\",80000),\r\n",
							"    (\"Truman\",\"Marketing\",\"NY\",91000)\r\n",
							"  ]\r\n",
							"\r\n",
							"schema = [\"name\",\"dep_name\",\"state\",\"salary\"]\r\n",
							"df = spark.createDataFrame(data=data, schema = schema)\r\n",
							"df.printSchema()\r\n",
							"df.show(truncate=False)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"\r\n",
							"# display(df.select(\"name\"))\r\n",
							"u = substr(df.select(\"name\"))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_config_raw')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GestaoVendas/raw"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "81a74da6-effe-4683-abe9-22bb82f8670f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dtIngestion = '20220401'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"container_name = 'raw'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"adls_path = 'abfss://%s@%s.dfs.core.windows.net' % (container_name, account_name)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_import_base')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GestaoVendas/base/import"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e47e6a8d-9b8a-4fdc-b9c1-aef8ace0b294"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import os"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_main_prepare_trusted')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GestaoVendas/raw"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "GestaoPoolSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4a7c5633-10ae-443a-9a02-d62514eedddd"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e63e4e78-7bcc-4a13-b746-41dc90a24486/resourceGroups/rg-mibitech/providers/Microsoft.Synapse/workspaces/wkssyngestao/bigDataPools/GestaoPoolSpark",
						"name": "GestaoPoolSpark",
						"type": "Spark",
						"endpoint": "https://wkssyngestao.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/GestaoPoolSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/raw/nb_prepare_trusted_clientes"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/raw/nb_prepare_trusted_contasapagar"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/raw/nb_prepare_trusted_fornecedores"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/raw/nb_prepare_trusted_pedidos"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/raw/nb_prepare_trusted_recebimentos"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_parameter_base')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GestaoVendas/base/parameter"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b56c80dd-0a80-4aa7-a96f-301fea03c8da"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"account_name = 'sagestaoloja'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_prepare_trusted_clientes')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GestaoVendas/raw"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "GestaoPoolSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "dd824ae9-da3a-4ce9-abe8-feb8d5f7ad74"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e63e4e78-7bcc-4a13-b746-41dc90a24486/resourceGroups/rg-mibitech/providers/Microsoft.Synapse/workspaces/wkssyngestao/bigDataPools/GestaoPoolSpark",
						"name": "GestaoPoolSpark",
						"type": "Spark",
						"endpoint": "https://wkssyngestao.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/GestaoPoolSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/base/import/nb_import_base"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/base/parameter/nb_parameter_base"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/raw/nb_config_raw"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**BIBLIOTECAS IMPORTADAS DE USO LOCAL**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import shutil\r\n",
							"import codecs\r\n",
							"from datetime import datetime\r\n",
							"\r\n",
							"import pandas as pd\r\n",
							"\r\n",
							"from pyspark.sql import *\r\n",
							"from pyspark.sql.types import *\r\n",
							"import pyspark.sql.functions as f"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**PARAMETROS LOCAIS**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Clientes\r\n",
							"file_path_read_clientes = '/pdv/Clientes/dtIngestao='+p_dt_ingestion[:6]+\"**\"\r\n",
							"file_path_write_clientes = '/clientes/ANO='+substr(p_dt_ingestion,1,4)+'/MES='+substr(p_dt_ingestion,5,2)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**LER DADOS EM FORMATO PARQUET**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"parquet_path = adls_path + file_path_read_clientes\r\n",
							"df_clientes = spark.read.parquet(parquet_path,header=\"false\",inferSchema=False) \r\n",
							"df_clientes.cache()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**FORMATA OS DADOS LIDOS DA ORIGEM**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_clientes = df_clientes.select(df_clientes.Prop_0.cast(\"integer\").alias('CODIGO'),\\\r\n",
							"                        df_clientes.Prop_1.cast(\"string\").alias('NOME'),\\\r\n",
							"                        df_clientes.Prop_2.cast(\"string\").alias('TELEFONE'),\\\r\n",
							"                        df_clientes.Prop_3.cast(\"string\").alias('EMAIL'),\\\r\n",
							"                        df_clientes.Prop_4.cast(\"string\").alias('NASCIMENTO'),\\\r\n",
							"                        df_clientes.Prop_5.cast(\"string\").alias('ANIVERSARIANTE'),\\\r\n",
							"                        df_clientes.Prop_6.cast(\"integer\").alias('IDADE'),\\\r\n",
							"                        df_clientes.Prop_7.cast(\"string\").alias('SEXO'),\\\r\n",
							"                        df_clientes.Prop_8.cast(\"string\").alias('ORIGEM'),\\\r\n",
							"                        df_clientes.Prop_9.cast(\"string\").alias('CADASTRO'),\\\r\n",
							"                        df_clientes.Prop_10.cast(\"string\").alias('UNIDADE')).withColumn('DATAINGESTAO', f.lit(dtIngestion))\r\n",
							"print(f'Clientes Formatados : {df_clientes.count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**LIMPAR OS DADOS IMPORTADOS**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# # Ler e filtrar e gravar dataframe - Cliente\r\n",
							"# df_clientes = df_clientes.dropna(how='all', subset='CODIGO')\r\n",
							"# # df_clientes = df_clientes.dropna(how='all', subset='IDADE')\r\n",
							"# print(f'Clientes Higienizado : {df_clientes.count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**GRAVAR OS DADOS NA TRUSTED**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"adls_path_write = 'abfss://%s@%s.dfs.core.windows.net' % ('trusted', account_name)\r\n",
							"#df_q_lctctb_01 = spark.range(5,10) \r\n",
							"df_clientes.repartition(1).write.format(\"parquet\").mode(\"overwrite\").save(adls_path_write + file_path_write_clientes)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.notebook.exit(adls_path_write + file_path_write_clientes)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_prepare_trusted_contasapagar')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GestaoVendas/raw"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "GestaoPoolSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5f2a7bea-3d8b-4b84-895a-3ff7b31dc0bf"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e63e4e78-7bcc-4a13-b746-41dc90a24486/resourceGroups/rg-mibitech/providers/Microsoft.Synapse/workspaces/wkssyngestao/bigDataPools/GestaoPoolSpark",
						"name": "GestaoPoolSpark",
						"type": "Spark",
						"endpoint": "https://wkssyngestao.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/GestaoPoolSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/base/import/nb_import_base"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/base/parameter/nb_parameter_base"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/raw/nb_config_raw"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**BIBLIOTECAS IMPORTADAS DE USO LOCAL**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import shutil\r\n",
							"import codecs\r\n",
							"from datetime import datetime\r\n",
							"\r\n",
							"import pandas as pd\r\n",
							"\r\n",
							"from pyspark.sql import *\r\n",
							"from pyspark.sql.types import *\r\n",
							"import pyspark.sql.functions as f"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**PARAMETROS LOCAIS**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Clientes\r\n",
							"file_path_read = '/ContasaPagar.xlsx/dtIngestao=**'\r\n",
							"file_path_write = '/contasapagar'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**LER DADOS EM FORMATO PARQUET**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"parquet_path = adls_path + file_path_read\r\n",
							"df_raw = spark.read.parquet(parquet_path,header=\"false\",inferSchema=False) \r\n",
							"df_raw.cache()\r\n",
							"print(f'Contas a Pagar CARREGADOS : {df_raw.cache().count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**FORMATA OS DADOS LIDOS DA ORIGEM**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_raw = df_raw.select(df_raw.Prop_0.cast(\"string\").alias('CATEGORIA'),\\\r\n",
							"                        df_raw.Prop_1.cast(\"string\").alias('DESCRICAO'),\\\r\n",
							"                        f.substring(df_raw.Prop_2,1,2).cast(\"int\").alias('DIAVENCTO'),\\\r\n",
							"                        f.substring(df_raw.Prop_2,4,2).cast(\"int\").alias('MESVENCTO'),\\\r\n",
							"                        f.substring(df_raw.Prop_2,7,4).cast(\"int\").alias('ANOVENCTO'),\\\r\n",
							"                        f.substring(df_raw.Prop_2,12,2).cast(\"int\").alias('HORAVENCTO'),\\\r\n",
							"                        f.substring(df_raw.Prop_2,15,2).cast(\"int\").alias('MINUTOVENCTO'),\\\r\n",
							"                        f.substring(df_raw.Prop_3,1,2).cast(\"int\").alias('DIAPG'),\\\r\n",
							"                        f.substring(df_raw.Prop_3,4,2).cast(\"int\").alias('MESPG'),\\\r\n",
							"                        f.substring(df_raw.Prop_3,7,4).cast(\"int\").alias('ANOPG'),\\\r\n",
							"                        f.substring(df_raw.Prop_3,12,2).cast(\"int\").alias('HORAPG'),\\\r\n",
							"                        f.substring(df_raw.Prop_3,15,2).cast(\"int\").alias('MINUTOPG'),\\\r\n",
							"                        f.regexp_replace(f.regexp_replace(df_raw.Prop_4,'[R$]',''), ',', '.').cast('double').alias('VALOR'),\\\r\n",
							"                        f.regexp_replace(f.regexp_replace(df_raw.Prop_5,'[R$]',''), ',', '.').cast('double').alias('VALORPG'),\\\r\n",
							"                        df_raw.Prop_6.cast(\"string\").alias('STATUS'),\\\r\n",
							"                        df_raw.Prop_7.cast(\"string\").alias('PARCELAS'),\\\r\n",
							"                        df_raw.Prop_8.cast(\"string\").alias('FORNECEDOR'),\\\r\n",
							"                        df_raw.Prop_9.cast(\"string\").alias('UNIDADE')).withColumn('DATAINGESTAO', f.lit(dtIngestion))\r\n",
							"print(f'Contas a Pagar Formatados : {df_raw.count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**LIMPAR OS DADOS IMPORTADOS**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Ler e filtrar e gravar dataframe - Cliente\r\n",
							"df_raw = df_raw.dropna(how='all', subset='CODIGO')\r\n",
							"df_raw = df_raw.dropna(how='all', subset='TIPO')\r\n",
							"print(f'Contas a Pagar Higienizado : {df_raw.count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**GRAVAR OS DADOS NA TRUSTED**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"adls_path_write = 'abfss://%s@%s.dfs.core.windows.net' % ('trusted', account_name)\r\n",
							"#df_q_lctctb_01 = spark.range(5,10) \r\n",
							"print(adls_path_write + file_path_write)\r\n",
							"df_raw.repartition(2).write.format(\"parquet\").mode(\"overwrite\").partitionBy(\"ANOPG\",\"MESPG\").save(adls_path_write + file_path_write)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 26
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_prepare_trusted_fornecedores')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GestaoVendas/raw"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "GestaoPoolSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "49321d38-581a-4acb-9f29-c4141b2498c3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e63e4e78-7bcc-4a13-b746-41dc90a24486/resourceGroups/rg-mibitech/providers/Microsoft.Synapse/workspaces/wkssyngestao/bigDataPools/GestaoPoolSpark",
						"name": "GestaoPoolSpark",
						"type": "Spark",
						"endpoint": "https://wkssyngestao.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/GestaoPoolSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/base/import/nb_import_base"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/base/parameter/nb_parameter_base"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/raw/nb_config_raw"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**BIBLIOTECAS IMPORTADAS DE USO LOCAL**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import shutil\r\n",
							"import codecs\r\n",
							"from datetime import datetime\r\n",
							"\r\n",
							"import pandas as pd\r\n",
							"\r\n",
							"from pyspark.sql import *\r\n",
							"from pyspark.sql.types import *\r\n",
							"import pyspark.sql.functions as f"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**PARAMETROS LOCAIS**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Clientes\r\n",
							"file_path_read = '/Fornecedores.xlsx/dtIngestao=**'\r\n",
							"file_path_write = '/fornecedores'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**LER DADOS EM FORMATO PARQUET**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"parquet_path = adls_path + file_path_read\r\n",
							"df_raw = spark.read.parquet(parquet_path,header=\"false\",inferSchema=False) \r\n",
							"df_raw.cache()\r\n",
							"print(f'Fornecedores CARREGADOS : {df_raw.cache().count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**FORMATA OS DADOS LIDOS DA ORIGEM**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_raw = df_raw.select(df_raw.Prop_0.cast(\"integer\").alias('CODIGO'),\\\r\n",
							"                        df_raw.Prop_1.cast(\"string\").alias('ORIGEM'),\\\r\n",
							"                        df_raw.Prop_2.cast(\"string\").alias('TIPO'),\\\r\n",
							"                        df_raw.Prop_3.cast(\"integer\").alias('QTITEM'),\\\r\n",
							"                        f.regexp_replace(f.regexp_replace(df_raw.Prop_4,'[R$]',''), ',', '.').cast('double').alias('VLFINAL'),\\\r\n",
							"                        df_raw.Prop_5.cast(\"string\").alias('STATUS'),\\\r\n",
							"                        f.substring(df_raw.Prop_6,1,2).cast(\"int\").alias('DIA'),\\\r\n",
							"                        f.substring(df_raw.Prop_6,4,2).cast(\"int\").alias('MES'),\\\r\n",
							"                        f.substring(df_raw.Prop_6,7,4).cast(\"int\").alias('ANO'),\\\r\n",
							"                        f.substring(df_raw.Prop_6,12,2).cast(\"int\").alias('HORA'),\\\r\n",
							"                        f.substring(df_raw.Prop_6,15,2).cast(\"int\").alias('MINUTO'),\\\r\n",
							"                        df_raw.Prop_7.cast(\"string\").alias('TEMPO'),\\\r\n",
							"                        df_raw.Prop_8.cast(\"string\").alias('UNIDADE'),\\\r\n",
							"                        df_raw.Prop_9.cast(\"string\").alias('EXCLUSAO')).withColumn('DATAINGESTAO', f.lit(dtIngestion))\r\n",
							"print(f'Fornecedores Formatados : {df_raw.count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**LIMPAR OS DADOS IMPORTADOS**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Ler e filtrar e gravar dataframe - Cliente\r\n",
							"# df_raw = df_raw.dropna(how='all', subset='CODIGO')\r\n",
							"# df_raw = df_raw.dropna(how='all', subset='IDADE')\r\n",
							"print(f'Fornecedores Higienizado : {df_raw.count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**GRAVAR OS DADOS NA TRUSTED**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"adls_path_write = 'abfss://%s@%s.dfs.core.windows.net' % ('trusted', account_name)\r\n",
							"#df_q_lctctb_01 = spark.range(5,10) \r\n",
							"print(adls_path_write + file_path_write)\r\n",
							"df_raw.repartition(1).write.format(\"parquet\").mode(\"overwrite\").partitionBy(\"ANO\",\"MES\").save(adls_path_write + file_path_write)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_prepare_trusted_pedidos')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GestaoVendas/raw"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "GestaoPoolSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "021fe959-18f2-4442-bbd1-3868cfc779a4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e63e4e78-7bcc-4a13-b746-41dc90a24486/resourceGroups/rg-mibitech/providers/Microsoft.Synapse/workspaces/wkssyngestao/bigDataPools/GestaoPoolSpark",
						"name": "GestaoPoolSpark",
						"type": "Spark",
						"endpoint": "https://wkssyngestao.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/GestaoPoolSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/base/import/nb_import_base"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/base/parameter/nb_parameter_base"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/raw/nb_config_raw"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**BIBLIOTECAS IMPORTADAS DE USO LOCAL**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import shutil\r\n",
							"import codecs\r\n",
							"from datetime import datetime\r\n",
							"\r\n",
							"import pandas as pd\r\n",
							"\r\n",
							"from pyspark.sql import *\r\n",
							"from pyspark.sql.types import *\r\n",
							"import pyspark.sql.functions as f"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**PARAMETROS LOCAIS**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Clientes\r\n",
							"file_path_read = '/ListaPedidos.xlsx/dtIngestao=**'\r\n",
							"file_path_write = '/pedidos'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**LER DADOS EM FORMATO PARQUET**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"parquet_path = adls_path + file_path_read\r\n",
							"df_raw = spark.read.parquet(parquet_path,header=\"false\",inferSchema=False) \r\n",
							"df_raw.cache()\r\n",
							"print(f'PEDIDOS CARREGADOS : {df_raw.cache().count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 50
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**FORMATA OS DADOS LIDOS DA ORIGEM**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_raw = df_raw.select(df_raw.Prop_0.cast(\"integer\").alias('CODIGO'),\\\r\n",
							"                        df_raw.Prop_1.cast(\"string\").alias('ORIGEM'),\\\r\n",
							"                        df_raw.Prop_2.cast(\"string\").alias('TIPO'),\\\r\n",
							"                        df_raw.Prop_3.cast(\"integer\").alias('QTITEM'),\\\r\n",
							"                        f.regexp_replace(f.regexp_replace(df_raw.Prop_4,'[R$]',''), ',', '.').cast('double').alias('VLFINAL'),\\\r\n",
							"                        df_raw.Prop_5.cast(\"string\").alias('STATUS'),\\\r\n",
							"                        f.substring(df_raw.Prop_6,1,2).cast(\"int\").alias('DIA'),\\\r\n",
							"                        f.substring(df_raw.Prop_6,4,2).cast(\"int\").alias('MES'),\\\r\n",
							"                        f.substring(df_raw.Prop_6,7,4).cast(\"int\").alias('ANO'),\\\r\n",
							"                        f.substring(df_raw.Prop_6,12,2).cast(\"int\").alias('HORA'),\\\r\n",
							"                        f.substring(df_raw.Prop_6,15,2).cast(\"int\").alias('MINUTO'),\\\r\n",
							"                        df_raw.Prop_7.cast(\"string\").alias('TEMPO'),\\\r\n",
							"                        df_raw.Prop_8.cast(\"string\").alias('UNIDADE'),\\\r\n",
							"                        df_raw.Prop_9.cast(\"string\").alias('EXCLUSAO')).withColumn('DATAINGESTAO', f.lit(dtIngestion))\r\n",
							"print(f'PEDIDOS Formatados : {df_raw.count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**LIMPAR OS DADOS IMPORTADOS**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Ler e filtrar e gravar dataframe - Cliente\r\n",
							"# df_raw = df_raw.dropna(how='all', subset='CODIGO')\r\n",
							"# df_raw = df_raw.dropna(how='all', subset='VLFINAL')\r\n",
							"print(f'PEDIDOS Higienizado : {df_raw.count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**GRAVAR OS DADOS NA TRUSTED**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"adls_path_write = 'abfss://%s@%s.dfs.core.windows.net' % ('trusted', account_name)\r\n",
							"#df_q_lctctb_01 = spark.range(5,10) \r\n",
							"print(adls_path_write + file_path_write)\r\n",
							"df_raw.repartition(2).write.format(\"parquet\").mode(\"overwrite\").partitionBy(\"ANO\",\"MES\").save(adls_path_write + file_path_write)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 57
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_prepare_trusted_recebimentos')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GestaoVendas/raw"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "GestaoPoolSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b4ae743e-e437-429d-a261-7170290aab0f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e63e4e78-7bcc-4a13-b746-41dc90a24486/resourceGroups/rg-mibitech/providers/Microsoft.Synapse/workspaces/wkssyngestao/bigDataPools/GestaoPoolSpark",
						"name": "GestaoPoolSpark",
						"type": "Spark",
						"endpoint": "https://wkssyngestao.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/GestaoPoolSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/base/import/nb_import_base"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/base/parameter/nb_parameter_base"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run GestaoVendas/raw/nb_config_raw"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**BIBLIOTECAS IMPORTADAS DE USO LOCAL**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import shutil\r\n",
							"import codecs\r\n",
							"from datetime import datetime\r\n",
							"\r\n",
							"import pandas as pd\r\n",
							"\r\n",
							"from pyspark.sql import *\r\n",
							"from pyspark.sql.types import *\r\n",
							"import pyspark.sql.functions as f"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**PARAMETROS LOCAIS**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Clientes\r\n",
							"file_path_read = '/Recebimentos.xlsx/dtIngestao=**'\r\n",
							"file_path_write = '/recebimentos'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**LER DADOS EM FORMATO PARQUET**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"parquet_path = adls_path + file_path_read\r\n",
							"df_raw = spark.read.parquet(parquet_path,header=\"false\",inferSchema=False) \r\n",
							"df_raw.cache()\r\n",
							"print(f'Recebimentos CARREGADOS : {df_raw.cache().count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 50
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**FORMATA OS DADOS LIDOS DA ORIGEM**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_raw = df_raw.select(df_raw.Prop_0.cast(\"string\").alias('TIPO'), \\\r\n",
							"                                         df_raw.Prop_1.cast(\"string\").alias('FORMAPG'), \\\r\n",
							"                                         f.substring(df_raw.Prop_2,1,2).cast(\"int\").alias('DIA'), \\\r\n",
							"                                         f.substring(df_raw.Prop_2,4,2).cast(\"int\").alias('MES'), \\\r\n",
							"                                         f.substring(df_raw.Prop_2,7,4).cast(\"int\").alias('ANO'), \\\r\n",
							"                                         f.substring(df_raw.Prop_2,12,2).cast(\"int\").alias('HORA'), \\\r\n",
							"                                         f.substring(df_raw.Prop_2,15,2).cast(\"int\").alias('MINUTO'), \\\r\n",
							"                                         f.regexp_replace(f.regexp_replace(df_raw.Prop_4,'[R$]',''),',','.').cast('double').alias('VALOR'), \\\r\n",
							"                                         f.regexp_replace(f.regexp_replace(df_raw.Prop_5,'[R$]',''), ',', '.').cast('double').alias('VLLIQUIDO'), \\\r\n",
							"                                         df_raw.Prop_6.cast(\"integer\").alias('PEDIDO'), \\\r\n",
							"                                         df_raw.Prop_7.cast(\"string\").alias('FUNC'), \\\r\n",
							"                                         df_raw.Prop_8.cast(\"integer\").alias('CAIXA'), \\\r\n",
							"                                         df_raw.Prop_9.cast(\"string\").alias('UNIDADE')).withColumn('DATAINGESTAO', f.lit(dtIngestion))\r\n",
							"print(f'Recebimentos Formatados : {df_raw.count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**LIMPAR OS DADOS IMPORTADOS**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Ler e filtrar e gravar dataframe - Cliente\r\n",
							"# df_raw = df_raw.dropna(how='all', subset='TIPO')\r\n",
							"# df_raw = df_raw.dropna(how='all', subset='VALOR')\r\n",
							"print(f'Recebimentos Higienizado : {df_raw.count()}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**GRAVAR OS DADOS NA TRUSTED**"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"adls_path_write = 'abfss://%s@%s.dfs.core.windows.net' % ('trusted', account_name)\r\n",
							"#df_q_lctctb_01 = spark.range(5,10) \r\n",
							"print(adls_path_write + file_path_write)\r\n",
							"df_raw.repartition(2).write.format(\"parquet\").mode(\"overwrite\").partitionBy(\"ANO\",\"MES\").save(adls_path_write + file_path_write)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 57
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GestaoPoolSpark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 6,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		}
	]
}