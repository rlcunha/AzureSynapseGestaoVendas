{
	"name": "nb_prepare_trusted_recebimentos",
	"properties": {
		"folder": {
			"name": "GestaoVendas/raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "GestaoPoolSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b4ae743e-e437-429d-a261-7170290aab0f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e63e4e78-7bcc-4a13-b746-41dc90a24486/resourceGroups/rg-mibitech/providers/Microsoft.Synapse/workspaces/wkssyngestao/bigDataPools/GestaoPoolSpark",
				"name": "GestaoPoolSpark",
				"type": "Spark",
				"endpoint": "https://wkssyngestao.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/GestaoPoolSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run GestaoVendas/base/import/nb_import_base"
				],
				"attachments": null,
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run GestaoVendas/base/parameter/nb_parameter_base"
				],
				"attachments": null,
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run GestaoVendas/raw/nb_config_raw"
				],
				"attachments": null,
				"execution_count": 47
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**BIBLIOTECAS IMPORTADAS DE USO LOCAL**"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import shutil\r\n",
					"import codecs\r\n",
					"from datetime import datetime\r\n",
					"\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"from pyspark.sql import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"import pyspark.sql.functions as f"
				],
				"attachments": null,
				"execution_count": 48
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**PARAMETROS LOCAIS**"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Clientes\r\n",
					"file_path_read = '/Recebimentos.xlsx/dtIngestao=**'\r\n",
					"file_path_write = '/recebimentos'"
				],
				"attachments": null,
				"execution_count": 54
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**LER DADOS EM FORMATO PARQUET**"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"parquet_path = adls_path + file_path_read\r\n",
					"df_raw = spark.read.parquet(parquet_path,header=\"false\",inferSchema=False) \r\n",
					"df_raw.cache()\r\n",
					"print(f'Recebimentos CARREGADOS : {df_raw.cache().count()}')"
				],
				"attachments": null,
				"execution_count": 50
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**FORMATA OS DADOS LIDOS DA ORIGEM**"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_raw = df_raw.select(df_raw.Prop_0.cast(\"string\").alias('TIPO'), \\\r\n",
					"                                         df_raw.Prop_1.cast(\"string\").alias('FORMAPG'), \\\r\n",
					"                                         f.substring(df_raw.Prop_2,1,2).cast(\"int\").alias('DIA'), \\\r\n",
					"                                         f.substring(df_raw.Prop_2,4,2).cast(\"int\").alias('MES'), \\\r\n",
					"                                         f.substring(df_raw.Prop_2,7,4).cast(\"int\").alias('ANO'), \\\r\n",
					"                                         f.substring(df_raw.Prop_2,12,2).cast(\"int\").alias('HORA'), \\\r\n",
					"                                         f.substring(df_raw.Prop_2,15,2).cast(\"int\").alias('MINUTO'), \\\r\n",
					"                                         f.regexp_replace(f.regexp_replace(df_raw.Prop_4,'[R$]',''),',','.').cast('double').alias('VALOR'), \\\r\n",
					"                                         f.regexp_replace(f.regexp_replace(df_raw.Prop_5,'[R$]',''), ',', '.').cast('double').alias('VLLIQUIDO'), \\\r\n",
					"                                         df_raw.Prop_6.cast(\"integer\").alias('PEDIDO'), \\\r\n",
					"                                         df_raw.Prop_7.cast(\"string\").alias('FUNC'), \\\r\n",
					"                                         df_raw.Prop_8.cast(\"integer\").alias('CAIXA'), \\\r\n",
					"                                         df_raw.Prop_9.cast(\"string\").alias('UNIDADE')).withColumn('DATAINGESTAO', f.lit(dtIngestion))\r\n",
					"print(f'Recebimentos Formatados : {df_raw.count()}')"
				],
				"attachments": null,
				"execution_count": 51
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**LIMPAR OS DADOS IMPORTADOS**"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Ler e filtrar e gravar dataframe - Cliente\r\n",
					"# df_raw = df_raw.dropna(how='all', subset='TIPO')\r\n",
					"# df_raw = df_raw.dropna(how='all', subset='VALOR')\r\n",
					"print(f'Recebimentos Higienizado : {df_raw.count()}')"
				],
				"attachments": null,
				"execution_count": 56
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**GRAVAR OS DADOS NA TRUSTED**"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"adls_path_write = 'abfss://%s@%s.dfs.core.windows.net' % ('trusted', account_name)\r\n",
					"#df_q_lctctb_01 = spark.range(5,10) \r\n",
					"print(adls_path_write + file_path_write)\r\n",
					"df_raw.repartition(2).write.format(\"parquet\").mode(\"overwrite\").partitionBy(\"ANO\",\"MES\").save(adls_path_write + file_path_write)"
				],
				"attachments": null,
				"execution_count": 57
			}
		]
	}
}