{
	"name": "Notebook 1",
	"properties": {
		"folder": {
			"name": "GestaoVendas/raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "GestaoPoolSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b8b32dc5-669b-47e6-b945-7984d260c10e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e63e4e78-7bcc-4a13-b746-41dc90a24486/resourceGroups/rg-mibitech/providers/Microsoft.Synapse/workspaces/wkssyngestao/bigDataPools/GestaoPoolSpark",
				"name": "GestaoPoolSpark",
				"type": "Spark",
				"endpoint": "https://wkssyngestao.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/GestaoPoolSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# DBTITLE 1,Complex Types\r\n",
					"import pyspark.sql.functions as F\r\n",
					"from pyspark.sql.types import ArrayType, DoubleType, IntegerType, LongType, StringType, StructType, StructField, BooleanType, MapType\r\n",
					"from pyspark.sql import Row\r\n",
					""
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# DBTITLE 1,Criação do DataFrame para o exemplo\r\n",
					"data = [Row(\"Kenny\",\"\",10,[50,90,80],{\"status\":\"Active\"}), \r\n",
					"        Row(\"Elis\",\"Robert\",20,[10,56,43,20],{\"status\":\"Inactive\"}), \r\n",
					"        Row(\"Myck\",\"Mendes\",30,[18,50,32],{\"status\":\"Active\"}), \r\n",
					"        Row(\"Edson\",\"Eliot\",40,[60,87,3],{\"status\":\"Active\"}) \r\n",
					"      ]\r\n",
					"\r\n",
					"rdd = spark.sparkContext.parallelize(data)"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"# DBTITLE 1,Criação do Esquema\r\n",
					"scheme = StructType([\r\n",
					"         StructField('firstname', StringType(), True),\r\n",
					"         StructField('middlename', StringType(), True),\r\n",
					"         StructField('age', IntegerType(), True),\r\n",
					"         StructField(\"points\", ArrayType(StringType()), True),\r\n",
					"         StructField(\"user_state\", MapType(StringType(),StringType()), True)        \r\n",
					"         ])"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print select(\"firstname\")"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# DBTITLE 1,Conversão de RDD para DataFrame\r\n",
					"df = rdd.toDF(schema=scheme)\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# COMMAND ----------\r\n",
					"\r\n",
					"df.printSchema()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# DBTITLE 1,Display do DataFrame\r\n",
					"display(df)\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.show(truncate=False)\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"# DBTITLE 1,Criação de uma nova coluna e explode em uma coluna com o valor array\r\n",
					"df02 = (df.withColumn(\"point\", F.explode(\"points\"))\r\n",
					"  .select(\"firstname\",\"point\",\"user_state.status\")  \r\n",
					"\r\n",
					"display(df02)\r\n",
					"  "
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# DBTITLE 1,Filtro por valores de uma coluna array e criação de uma coluna com o segundo valor do array\r\n",
					"df03 = (df.filter(F.array_contains(F.col(\"points\"), \"50\")).withColumn(\"get_point\", F.element_at(F.col(\"points\"), 2)))      \r\n",
					"display(df03)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# DBTITLE 1,Criação de uma coluna com o primeiro valor do array\r\n",
					"df04 = df.withColumn(\"get_point\", F.element_at(F.col(\"points\"), 1))\r\n",
					"display(df04)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# DBTITLE 1,Agrupamento por status e agregação por pontos\r\n",
					"df05 = (df04.groupBy(\"user_state.status\")\r\n",
					"  .agg(F.collect_set(\"get_point\").alias(\"Points\"))\r\n",
					")\r\n",
					"display(df05)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# DBTITLE 1,Renomear coluna\r\n",
					"df05 = df05.withColumnRenamed(\"Points\",\"New_Points\")\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"df05.show(truncate=False)\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}