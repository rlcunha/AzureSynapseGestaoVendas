{
	"name": "nb_prepare_trusted_contasapagar",
	"properties": {
		"folder": {
			"name": "GestaoVendas/raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "GestaoPoolSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "50340d31-8aee-4002-b7d7-6f53f417b344"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e63e4e78-7bcc-4a13-b746-41dc90a24486/resourceGroups/rg-mibitech/providers/Microsoft.Synapse/workspaces/wkssyngestao/bigDataPools/GestaoPoolSpark",
				"name": "GestaoPoolSpark",
				"type": "Spark",
				"endpoint": "https://wkssyngestao.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/GestaoPoolSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run GestaoVendas/base/import/nb_import_base"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run GestaoVendas/base/parameter/nb_parameter_base"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run GestaoVendas/raw/nb_config_raw"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**BIBLIOTECAS IMPORTADAS DE USO LOCAL**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as f\r\n",
					"from pyspark.sql import Window\r\n",
					"from pyspark.sql import SparkSession"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**PARAMETROS LOCAIS**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Clientes\r\n",
					"file_path_read = '/pdv/ContasaPagar' #/dtIngestao='+par_data_ingestion\r\n",
					"file_path_write = '/contasapagar'"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**LER DADOS EM FORMATO PARQUET**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"parquet_path = adls_path + file_path_read\r\n",
					"df = spark.read.parquet(parquet_path,header=\"false\",inferSchema=False) \r\n",
					"df.cache()"
				],
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Prepara sessao spark para usar recursos de auto-identação**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"w = Window().orderBy(f.lit('A'))"
				],
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**FORMATA OS DADOS LIDOS DA ORIGEM**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df1 = df0.select(f.substring(df0.Prop_8,1,2).cast('int').alias('CODIGO'),\r\n",
					"                        f.substring(df0.Prop_8,4,2).cast('int').alias('SUBCODIGO1'),\r\n",
					"                        f.substring(df0.Prop_8,7,2).cast('int').alias('SUBCODIGO2'),\r\n",
					"                        f.substring(f.regexp_replace(df0.Prop_8,'-',''),9,30).alias('DESCSUBCODIGO'),\r\n",
					"                        df0.Prop_0.cast('string').alias('CATEGORIA'),\r\n",
					"                        df0.Prop_1.cast('string').alias('DESCRICAO'),\r\n",
					"                        f.substring(df0.Prop_2,1,2).cast('int').alias('DIAVENCTO'),\r\n",
					"                        f.substring(df0.Prop_2,4,2).cast('int').alias('MESVENCTO'),\r\n",
					"                        f.substring(df0.Prop_2,7,4).cast('int').alias('ANOVENCTO'),\r\n",
					"                        # f.substring(df0.Prop_2,12,2).cast('int').alias('HORAVENCTO'),\r\n",
					"                        # f.substring(df0.Prop_2,15,2).cast('int').alias('MINUTOVENCTO'),\r\n",
					"                        f.substring(df0.Prop_3,1,2).cast('int').alias('DIA_PG'),\r\n",
					"                        f.substring(df0.Prop_3,4,2).cast('int').alias('MES_PG'),\r\n",
					"                        f.substring(df0.Prop_3,7,4).cast('int').alias('ANO_PG'),\r\n",
					"                        # f.substring(df0.Prop_3,12,2).cast('int').alias('HORAPG'),\r\n",
					"                        # f.substring(df0.Prop_3,15,2).cast('int').alias('MINUTOPG'),\r\n",
					"                        f.regexp_replace(f.regexp_replace(f.regexp_replace(f.trim(df0.Prop_4),'[R$ ]',''),'[.]',''),',','.').alias('VALOR'),\r\n",
					"                        f.regexp_replace(f.regexp_replace(f.regexp_replace(f.trim(df0.Prop_5),'[R$ ]',''),'[.]',''),',','.').alias('VALORPG'),\r\n",
					"                        df0.Prop_6.cast('string').alias('STATUS'),\r\n",
					"                        df0.Prop_7.cast('string').alias('PARCELAS'),\r\n",
					"                        df0.Prop_8.cast('string').alias('FORNECEDOR'),\r\n",
					"                        df0.Prop_9.cast('string').alias('UNIDADE'))\\\r\n",
					"                        .withColumn('DATAINGESTAO', f.lit(dtIngestion))\r\n",
					"print(f'Contas a Pagar Formatados : {df1.count()}')"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**RETIRA REGISTROS DUPLICADOS**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df1.distinct()"
				],
				"execution_count": 25
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**LIMPAR OS DADOS IMPORTADOS**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Ler e filtrar e gravar dataframe - Cliente\r\n",
					"df = df.dropna(how='all', subset='DESCRICAO')\r\n",
					"print(f'Contas a Pagar Higienizado : {df.count()}')"
				],
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**AUTO NUMERAÇÃO DOS REGISTROS**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df.select(f.row_number().over(w).alias('ID'),'*')"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**GRAVAR OS DADOS NA TRUSTED**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"adls_path_write = 'abfss://%s@%s.dfs.core.windows.net' % ('trusted', account_name)\r\n",
					"#df_q_lctctb_01 = spark.range(5,10) \r\n",
					"df.write.format(\"parquet\").mode(\"overwrite\").save(adls_path_write + file_path_write)"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_cotas = df.select('CODIGO','SUBCODIGO1','SUBCODIGO2','DESCSUBCODIGO').distinct().dropna(how='all', subset='CODIGO')\r\n",
					"df_cotas.write.format(\"parquet\").mode(\"overwrite\").parquet('/codigocontas')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# mssparkutils.notebook.exit(adls_path_write + file_path_write)"
				],
				"execution_count": 30
			}
		]
	}
}